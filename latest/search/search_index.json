{
    "docs": [
        {
            "location": "/", 
            "text": "REDCap\n\n\n\n\nREDCap\n\n\nOverview\n\n\nIndex\n\n\n\n\n\n\nExport\n\n\nRecords\n\n\nProject Info\n\n\nUsers\n\n\nSurveys\n\n\nArms\n\n\nEvents\n\n\nInstruments\n\n\nInstrument Event Mappings\n\n\n\n\n\n\nImport\n\n\nRecords\n\n\nProject Info\n\n\nMetadata\n\n\nUsers\n\n\nFiles\n\n\nArms\n\n\nEvents\n\n\nInstrument Event Mappings\n\n\n\n\n\n\nDeletion\n\n\nRecords\n\n\nFiles\n\n\nArms\n\n\nEvents\n\n\n\n\n\n\nUtilities\n\n\nConfig\n\n\nProject Creation\n\n\nRecord ID\n\n\n\n\n\n\nExamples\n\n\nBasic Usage\n\n\nFile Handling\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nA Julia frontend for the REDCap API. REDCap.jl supports both importing and exporting records, as well as deletion from the REDCap Database. It also includes functions for surveys and report generation.\n\n\nThis package is meant to be a straightforward wrapper for the REDCap API, and assumes familiarity with REDCap. Knowledge of the data expected by the instruments you are working in is required, as this package makes few assumptions on incoming data. Accessing a REDCap project is also entirely dependant on a correctly set-up Config object, so ensure the Config is properly set-up before automating anything in a project.\n\n\n\n\nIndex\n\n\n\n\nREDCap.create_project\n\n\nREDCap.delete_arms\n\n\nREDCap.delete_events\n\n\nREDCap.delete_file\n\n\nREDCap.delete_records\n\n\nREDCap.export_arms\n\n\nREDCap.export_events\n\n\nREDCap.export_instrument_event_mappings\n\n\nREDCap.export_instruments\n\n\nREDCap.export_records\n\n\nREDCap.export_report\n\n\nREDCap.export_users\n\n\nREDCap.import_events\n\n\nREDCap.import_project_information\n\n\nREDCap.import_records", 
            "title": "Home"
        }, 
        {
            "location": "/#redcap", 
            "text": "REDCap  Overview  Index    Export  Records  Project Info  Users  Surveys  Arms  Events  Instruments  Instrument Event Mappings    Import  Records  Project Info  Metadata  Users  Files  Arms  Events  Instrument Event Mappings    Deletion  Records  Files  Arms  Events    Utilities  Config  Project Creation  Record ID    Examples  Basic Usage  File Handling", 
            "title": "REDCap"
        }, 
        {
            "location": "/#overview", 
            "text": "A Julia frontend for the REDCap API. REDCap.jl supports both importing and exporting records, as well as deletion from the REDCap Database. It also includes functions for surveys and report generation.  This package is meant to be a straightforward wrapper for the REDCap API, and assumes familiarity with REDCap. Knowledge of the data expected by the instruments you are working in is required, as this package makes few assumptions on incoming data. Accessing a REDCap project is also entirely dependant on a correctly set-up Config object, so ensure the Config is properly set-up before automating anything in a project.", 
            "title": "Overview"
        }, 
        {
            "location": "/#index", 
            "text": "REDCap.create_project  REDCap.delete_arms  REDCap.delete_events  REDCap.delete_file  REDCap.delete_records  REDCap.export_arms  REDCap.export_events  REDCap.export_instrument_event_mappings  REDCap.export_instruments  REDCap.export_records  REDCap.export_report  REDCap.export_users  REDCap.import_events  REDCap.import_project_information  REDCap.import_records", 
            "title": "Index"
        }, 
        {
            "location": "/export/", 
            "text": "Export\n\n\nExporting from a REDCap database is straightforward. Exports are in \njson\n format by default, returned as a \nDict\n. \nxml\n, \ncsv\n, \ndf\n, and \nodm\n formats are all valid formats to pass into this API, and will return a LightXML document, raw \ncsv\n, a Dataframe object, or \nodm\n interpreted as a LightXML document (Julia support for \nodm\n is sparse). Some exports, such as version and url/return code for surveys return as simple strings, while most others return in the specified format.\n\n\nBecause REDCap is medical in nature, some information may be identifying information.\n\n\nFrom the REDCap Documentation:\n\n\nNote about export rights:\n\n\n\n\nPlease be aware that Data Export user rights will be applied to this API request. For example, if you have 'No Access' data export rights in the project, then the API data export will fail and return an error. And if you have 'De-Identified' or 'Remove all tagged Identifier fields' data export rights, then some data fields \nmight\n be removed and filtered out of the data set returned from the API. To make sure that no data is unnecessarily filtered out of your API request, you should have 'Full Data Set' export rights in the project.\n\n\n\n\n\n\nRecords\n\n\n#\n\n\nREDCap.export_records\n \n \nMethod\n.\n\n\nexport_records(config::REDCap.Config; format::String=\njson\n, dtype::String=\nflat\n, records::Array=[], fields::Array=[], forms::Array=[], events::Array=[], rawOrLabel::String=\nraw\n, rawOrLabelHeaders::String=\nraw\n, exportCheckboxLabel::Bool=false, returnFormat::String=\njson\n, exportSurveyFields::Bool=false, exportDataAccessGroups::Bool=false, filterLogic::String=\n, file_loc::String=\n)\n\n\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing url and api-key\n\n\nformat\n - \"json\", \"xml\", \"csv\", or \"odm\". decides format of returned data\n\n\ndtype\n - Output mode: \"flat\" (output one record per row) or \"eav\" (one data point per row)\n\n\nrecords\n - Array of record names to include\n\n\nfields\n - Array of field names to include\n\n\nforms\n - Array of form names to include\n\n\nevents\n - Array of event names to include\n\n\nrawOrLabel\n - \"raw\" or \"label\" - export raw coded values or labels for multiple choice fields\n\n\nrawOrLabelHeaders\n - Same as above, for headers\n\n\nexportCheckboxLabel\n - Checkbox behavior: export checkboxes as \"checked/unchecked\" or as \"field-name/'blank'\"\n\n\nreturnFormat\n - Error message format\n\n\nexportSurveyFields\n - Flag to return survey fields or not\n\n\nexportDataAccessGroups\n - Flag to return DAGroups or not\n\n\nfilterLogic\n - Allows collection of records that fulfill a criteria eg. \"[age] \n 65\"\n\n\nfile_loc\n - Location to export to\n\n\n\n\nReturns:\n\n\nAn array of Dictionaries containing record information\n\n\nsource\n\n\n\n\nNotes:\n\n\nExported records can be returned normally, or written to a file. Records can be exported by their record ID, by specified fields, or even using a boolean logic string such as \n[age]\n80\n\n\nexport_records(config)\n\nexport_records(config, records=[\n1\n,\n2\n], fields=[\nrecord_id\n, \nfirstname\n], filterLogic=\n[age]\n80\n)\n\n#records can also be exported directly to a file by passing `file_loc` a path\nexport_records(config, file_loc=\n/src/output.csv\n, format=\ncsv\n)\n\n\n\n\nThe rawOrLabel* parameters control the return format of some fields like gender, which returns as either \"Male/Female\" for \nlabel\n, or \"1/0\" for \nraw\n.\n\n\nexport_records(config, rawOrLabel=\nlabel\n)\nexport_records(config, rawOrLabelHeaders=\nlabel\n)\n\n\n\n\nThe type parameter controls whether records are returned as one record per row, or one data-point per row.\n\n\nexport_records(config, type=\neav\n)\n\n\n\n\nReturns: \n\n\n68-element Array{Any,1}:\n Dict{String,Any}(\nrecord\n=\n1\n,\nvalue\n=\n1\n,\nfield_name\n=\nsex\n)                                     \n Dict{String,Any}(\nrecord\n=\n1\n,\nvalue\n=\n168 Anderson Blvd. Quincy MA 01227\n,\nfield_name\n=\naddress\n)\n Dict{String,Any}(\nrecord\n=\n1\n,\nvalue\n=\n180\n,\nfield_name\n=\nheight\n)                                \n Dict{String,Any}(\nrecord\n=\n1\n,\nvalue\n=\n1962-07-30\n,\nfield_name\n=\ndob\n)                            \n Dict{String,Any}(\nrecord\n=\n1\n,\nvalue\n=\n1\n,\nfield_name\n=\nrecord_id\n)                               \n Dict{String,Any}(\nrecord\n=\n1\n,\nvalue\n=\nRandomly Generated - Demographics\n,\nfield_name\n=\ncomments\n)\n Dict{String,Any}(\nrecord\n=\n1\n,\nvalue\n=\nJSmith@aol.com\n,\nfield_name\n=\nemail\n)                      \n Dict{String,Any}(\nrecord\n=\n1\n,\nvalue\n=\nJohn\n,\nfield_name\n=\nfirst_name\n)                           \n Dict{String,Any}(\nrecord\n=\n1\n,\nvalue\n=\n0\n,\nfield_name\n=\ndemographics_complete\n)           \n \u22ee                           \n Dict{String,Any}(\nrecord\n=\n4\n,\nvalue\n=\n1\n,\nfield_name\n=\nrace\n)                                    \n Dict{String,Any}(\nrecord\n=\n4\n,\nvalue\n=\n0\n,\nfield_name\n=\nsex\n)                                     \n Dict{String,Any}(\nrecord\n=\n4\n,\nvalue\n=\n185\n,\nfield_name\n=\nheight\n)                                \n Dict{String,Any}(\nrecord\n=\n4\n,\nvalue\n=\n90\n,\nfield_name\n=\nweight\n)                                 \n Dict{String,Any}(\nrecord\n=\n4\n,\nvalue\n=\nRandomly Generated - Demographics\n,\nfield_name\n=\ncomments\n)\n Dict{String,Any}(\nrecord\n=\n4\n,\nvalue\n=\n0\n,\nfield_name\n=\ndemographics_complete\n)                   \n Dict{String,Any}(\nrecord\n=\n4\n,\nvalue\n=\n0\n,\nfield_name\n=\nvisit_form_complete\n)                     \n Dict{String,Any}(\nrecord\n=\n4\n,\nvalue\n=\n46\n,\nfield_name\n=\nage\n)                                    \n Dict{String,Any}(\nrecord\n=\n4\n,\nvalue\n=\n26.3\n,\nfield_name\n=\nbmi\n)   \n\n\n\n\n\n\nProject Info\n\n\nProject information, field names, and metadata are all available for export. As above, they can be written directly to a file.\n\n\nA \n.pdf\n of the entire project is available through \nexport_pdf()\n, as well as the entire project as an \nxml\n file through \nexport_project()\n\n\n\n\nField and Metadata\n\n\nBoth field names and the project metadata can be exported through API calls.\n\n\nField names will return a dictionary of field names with the export name, original name, and choice value.\n\n\nMetadata will return a dictionary of field names, as well as all settings associated with that field.\n\n\n#Get a list of field names for the records\nfields = export_field_names(config)\n\n#Project metadata can be read and modified this way - See Section on Imports\nmetadata = export_metadata(config)\n\n#Metadata output can also be formatted\nmetacsv = export_metadata(config, format=\ncsv\n)\n\n\n\n\n\n\nFull Project Info\n\n\nThe entire project can be exported in a number of ways. Using \nexport_project()\n, the entire project is returned as an xml file. \nexport_project_information()\n returns a dictionary of the project's configuration\n\n\n#A dict of the projects information can be retrieved through:\nproj_info = export_project_information(config)\n\n#The entire project can also be exported as a xml\nexport_project(config)\n\n#A PDF summary of entire project\nexport_pdf(config, \nfile-path\n, allRecords=true)\n\n#A PDF summary of specific records\nexport_pdf(config, \nfile-path\n, record=\n1\n, event=\n, instrument=\ndemographics\n)\n\n\n\n\n\n\nReports\n\n\n#\n\n\nREDCap.export_report\n \n \nMethod\n.\n\n\nexport_report(config::REDCap.Config, report_id::Integer; format::String=\njson\n, returnFormat::String=\njson\n, rawOrLabel::String=\nraw\n, rawOrLabelHeaders::String=\nraw\n, exportCheckboxLabel::Bool=false, file_loc::String=\n)\n\n\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing url and api-key\n\n\nreport_id\n - Id of report to export\n\n\nformat\n - \"json\", \"xml\", \"csv\", or \"odm\". decides format of returned data\n\n\nreturnFormat\n - Error message format\n\n\nrawOrLabel\n - \"raw\" or \"label\" - export raw coded values or labels for multiple choice fields\n\n\nrawOrLabelHeaders\n - Same as above, for headers\n\n\nexportCheckboxLabel\n - Checkbox behavior: export checkboxes as \"checked/unchecked\" or as \"field-name/'blank'\"\n\n\nfile_loc\n - Location to export to\n\n\n\n\nReturns:\n\n\nFormatted dict of report.\n\n\nsource\n\n\n\n\nNotes:\n\n\nReports can also be exported using the generated ID given on the REDCap dashboard.\n\n\n\n\nATTN:\n\n\nThis is \nNOT\n the name of the report.\n\n\nreport = export_report(config, \n2\n)\n\n\n\n\nA Report can contain a subset of records along with a subset of their fields. Report creation is handled through the REDCap project database.\n\n\n\n\nVersion\n\n\nThe version of REDCap you are working with can be shown through \nexport_version()\n\n\nexport_version(config)\n\n\n\n\n8.1.0\n\n\n\n\n\n\n\nUsers\n\n\n#\n\n\nREDCap.export_users\n \n \nMethod\n.\n\n\nexport_users(config::REDCap.Config; format::String=\njson\n, returnFormat::String=\njson\n, file_loc::String=\n)\n\n\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing url and api-key\n\n\nformat\n - \"json\", \"xml\", \"csv\", or \"odm\". decides format of returned data\n\n\nreturnFormat\n - Error message format\n\n\nfile_loc\n - Location to export to\n\n\n\n\nReturns:\n\n\nArray of formatted dicts of users for project.\n\n\nsource\n\n\n\n\nNotes:\n\n\nA full list of users can be exported and viewed/modified using the \nexport_users()\n function. User Rights can be modified (by a user with appropriate rights) using this method. - See Section on Imports\n\n\n#Returns an array of dictionaries\nusers = export_users(config)\n\n\n\n\n\n\nSurveys\n\n\nREDCap allows surveys to be tied both to a given event and to an individual record. Accessing features of these surveys is easy through the provided API.\n\n\nA survey link can be generated for a particular record and instrument/event through the \nexport_survey_link()\n function. The instrument name may be different than it is displayed on the REDCap dashboard. Surveys must be enabled for the given instrument.\n\n\n#Creates a URL to survey for a given record\nlink = export_survey_link(config, \n23\n, \ndemographics\n, \nevent\n)\n\n\n\n\nThis returns a string of the link.\n\n\nReturn codes and Queue links can also be created by passing mostly the same values. Survey queue must be enabled for queue links to work.\n\n\n#Survey return codes\ncode = export_survey_return_code(config, \n1\n, \ndemographics\n, \nevent\n)\n\n#Survey queue link\nqlink =  export_survey_queue_link(config, \n1\n)\n\n#Survey participant list\nlist = export_survey_participant_list(config, \ndemographics\n, \nevent\n)\n\n\n\n\n\n\nArms\n\n\n#\n\n\nREDCap.export_arms\n \n \nMethod\n.\n\n\nexport_arms(config::REDCap.Config; arms::Array=[], format::String=\njson\n, returnFormat::String=\njson\n, file_loc::String=\n)\n\n\n\n\nReturns a dict of all arms used in the project.\n\n\nNOTE: This only works for longitudinal projects.\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing url and api-key\n\n\narms\n - Array of arm names to export\n\n\nformat\n - \"json\", \"xml\", \"csv\", or \"odm\". decides format of returned data\n\n\nreturnFormat\n - Error message format\n\n\nfile_loc\n - Location to export to\n\n\n\n\nReturns:\n\n\nFormatted dict of Arms for project.\n\n\nsource\n\n\n\n\nNotes:\n\n\nThe metadata of a projects arms can be exported with \nexport_arms(config)\n, which by default returns a dictionary containing both the name and number of an arm. Only select arms may be exported by passing an array of arm numbers.\n\n\narms = export_arms(config)\n\n\n\n\nThis can only be used in a longitudinal project. Exporting arms in a non-longitudinal project will result in an error.\n\n\n\n\nEvents\n\n\n#\n\n\nREDCap.export_events\n \n \nMethod\n.\n\n\nexport_events(config::REDCap.Config; arms::Array=[], format::String=\njson\n, returnFormat::String=\njson\n, file_loc::String=\n)\n\n\n\n\nNOTE: This only works for longitudinal projects.\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing url and api-key\n\n\narms\n - Array of arm names to export\n\n\nformat\n - \"json\", \"xml\", \"csv\", or \"odm\". decides format of returned data\n\n\nreturnFormat\n - Error message format\n\n\nfile_loc\n - Location to export to\n\n\n\n\nReturns:\n\n\nFormatted dict of events for project.\n\n\nsource\n\n\n\n\nNotes:\n\n\nAn array of events is returned, along with the events information.\n\n\nevents = export_events(config)\n\n\n\n\n\n\nInstruments\n\n\n#\n\n\nREDCap.export_instruments\n \n \nMethod\n.\n\n\nexport_instruments(config::REDCap.Config; format::String=\njson\n, file_loc::String=\n)\n\n\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing url and api-key\n\n\nformat\n - \"json\", \"xml\", \"csv\", or \"odm\". decides format of returned data\n\n\nfile_loc\n - Location to export to\n\n\n\n\nReturns:\n\n\nFormatted dict for data collection instruments of project.\n\n\nsource\n\n\n\n\nNotes:\n\n\nInstrument information may also be exported using \nexport_instruments(config)\n. By default this returns a dictionary of the instrument label and the instruments variable name (which is often different from the label and is needed to access instruments via the API).\n\n\ninstruments = export_instruments(config)\n\n\n\n\n\n\nInstrument Event Mappings\n\n\n#\n\n\nREDCap.export_instrument_event_mappings\n \n \nFunction\n.\n\n\nexport_instrument_event_mappings(config::REDCap.Config, arms::Array=[]; format::String=\njson\n, returnFormat::String=\njson\n, file_loc::String=\n)\n\n\n\n\nNOTE: This only works for longitudinal projects.\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing url and api-key\n\n\narms\n - Array of arm names to export\n\n\nformat\n - \"json\", \"xml\", \"csv\", or \"odm\". decides format of returned data\n\n\nreturnFormat\n - Error message format\n\n\nfile_loc\n - Location to export to\n\n\n\n\nReturns:\n\n\nFormatted dict of instrument-event mappings for project.\n\n\nsource\n\n\n\n\nNotes:\n\n\nThe mappings between events and instruments may be exported using \nexport_instrument_event_mappings()\n\n\nexport_instrument_event_mappings(config, [\n1\n])", 
            "title": "Export"
        }, 
        {
            "location": "/export/#export", 
            "text": "Exporting from a REDCap database is straightforward. Exports are in  json  format by default, returned as a  Dict .  xml ,  csv ,  df , and  odm  formats are all valid formats to pass into this API, and will return a LightXML document, raw  csv , a Dataframe object, or  odm  interpreted as a LightXML document (Julia support for  odm  is sparse). Some exports, such as version and url/return code for surveys return as simple strings, while most others return in the specified format.  Because REDCap is medical in nature, some information may be identifying information.  From the REDCap Documentation:  Note about export rights:   Please be aware that Data Export user rights will be applied to this API request. For example, if you have 'No Access' data export rights in the project, then the API data export will fail and return an error. And if you have 'De-Identified' or 'Remove all tagged Identifier fields' data export rights, then some data fields  might  be removed and filtered out of the data set returned from the API. To make sure that no data is unnecessarily filtered out of your API request, you should have 'Full Data Set' export rights in the project.", 
            "title": "Export"
        }, 
        {
            "location": "/export/#records", 
            "text": "#  REDCap.export_records     Method .  export_records(config::REDCap.Config; format::String= json , dtype::String= flat , records::Array=[], fields::Array=[], forms::Array=[], events::Array=[], rawOrLabel::String= raw , rawOrLabelHeaders::String= raw , exportCheckboxLabel::Bool=false, returnFormat::String= json , exportSurveyFields::Bool=false, exportDataAccessGroups::Bool=false, filterLogic::String= , file_loc::String= )  Parameters:   config  - Struct containing url and api-key  format  - \"json\", \"xml\", \"csv\", or \"odm\". decides format of returned data  dtype  - Output mode: \"flat\" (output one record per row) or \"eav\" (one data point per row)  records  - Array of record names to include  fields  - Array of field names to include  forms  - Array of form names to include  events  - Array of event names to include  rawOrLabel  - \"raw\" or \"label\" - export raw coded values or labels for multiple choice fields  rawOrLabelHeaders  - Same as above, for headers  exportCheckboxLabel  - Checkbox behavior: export checkboxes as \"checked/unchecked\" or as \"field-name/'blank'\"  returnFormat  - Error message format  exportSurveyFields  - Flag to return survey fields or not  exportDataAccessGroups  - Flag to return DAGroups or not  filterLogic  - Allows collection of records that fulfill a criteria eg. \"[age]   65\"  file_loc  - Location to export to   Returns:  An array of Dictionaries containing record information  source", 
            "title": "Records"
        }, 
        {
            "location": "/export/#notes", 
            "text": "Exported records can be returned normally, or written to a file. Records can be exported by their record ID, by specified fields, or even using a boolean logic string such as  [age] 80  export_records(config)\n\nexport_records(config, records=[ 1 , 2 ], fields=[ record_id ,  firstname ], filterLogic= [age] 80 )\n\n#records can also be exported directly to a file by passing `file_loc` a path\nexport_records(config, file_loc= /src/output.csv , format= csv )  The rawOrLabel* parameters control the return format of some fields like gender, which returns as either \"Male/Female\" for  label , or \"1/0\" for  raw .  export_records(config, rawOrLabel= label )\nexport_records(config, rawOrLabelHeaders= label )  The type parameter controls whether records are returned as one record per row, or one data-point per row.  export_records(config, type= eav )  Returns:   68-element Array{Any,1}:\n Dict{String,Any}( record = 1 , value = 1 , field_name = sex )                                     \n Dict{String,Any}( record = 1 , value = 168 Anderson Blvd. Quincy MA 01227 , field_name = address )\n Dict{String,Any}( record = 1 , value = 180 , field_name = height )                                \n Dict{String,Any}( record = 1 , value = 1962-07-30 , field_name = dob )                            \n Dict{String,Any}( record = 1 , value = 1 , field_name = record_id )                               \n Dict{String,Any}( record = 1 , value = Randomly Generated - Demographics , field_name = comments )\n Dict{String,Any}( record = 1 , value = JSmith@aol.com , field_name = email )                      \n Dict{String,Any}( record = 1 , value = John , field_name = first_name )                           \n Dict{String,Any}( record = 1 , value = 0 , field_name = demographics_complete )           \n \u22ee                           \n Dict{String,Any}( record = 4 , value = 1 , field_name = race )                                    \n Dict{String,Any}( record = 4 , value = 0 , field_name = sex )                                     \n Dict{String,Any}( record = 4 , value = 185 , field_name = height )                                \n Dict{String,Any}( record = 4 , value = 90 , field_name = weight )                                 \n Dict{String,Any}( record = 4 , value = Randomly Generated - Demographics , field_name = comments )\n Dict{String,Any}( record = 4 , value = 0 , field_name = demographics_complete )                   \n Dict{String,Any}( record = 4 , value = 0 , field_name = visit_form_complete )                     \n Dict{String,Any}( record = 4 , value = 46 , field_name = age )                                    \n Dict{String,Any}( record = 4 , value = 26.3 , field_name = bmi )", 
            "title": "Notes:"
        }, 
        {
            "location": "/export/#project-info", 
            "text": "Project information, field names, and metadata are all available for export. As above, they can be written directly to a file.  A  .pdf  of the entire project is available through  export_pdf() , as well as the entire project as an  xml  file through  export_project()", 
            "title": "Project Info"
        }, 
        {
            "location": "/export/#field-and-metadata", 
            "text": "Both field names and the project metadata can be exported through API calls.  Field names will return a dictionary of field names with the export name, original name, and choice value.  Metadata will return a dictionary of field names, as well as all settings associated with that field.  #Get a list of field names for the records\nfields = export_field_names(config)\n\n#Project metadata can be read and modified this way - See Section on Imports\nmetadata = export_metadata(config)\n\n#Metadata output can also be formatted\nmetacsv = export_metadata(config, format= csv )", 
            "title": "Field and Metadata"
        }, 
        {
            "location": "/export/#full-project-info", 
            "text": "The entire project can be exported in a number of ways. Using  export_project() , the entire project is returned as an xml file.  export_project_information()  returns a dictionary of the project's configuration  #A dict of the projects information can be retrieved through:\nproj_info = export_project_information(config)\n\n#The entire project can also be exported as a xml\nexport_project(config)\n\n#A PDF summary of entire project\nexport_pdf(config,  file-path , allRecords=true)\n\n#A PDF summary of specific records\nexport_pdf(config,  file-path , record= 1 , event= , instrument= demographics )", 
            "title": "Full Project Info"
        }, 
        {
            "location": "/export/#reports", 
            "text": "#  REDCap.export_report     Method .  export_report(config::REDCap.Config, report_id::Integer; format::String= json , returnFormat::String= json , rawOrLabel::String= raw , rawOrLabelHeaders::String= raw , exportCheckboxLabel::Bool=false, file_loc::String= )  Parameters:   config  - Struct containing url and api-key  report_id  - Id of report to export  format  - \"json\", \"xml\", \"csv\", or \"odm\". decides format of returned data  returnFormat  - Error message format  rawOrLabel  - \"raw\" or \"label\" - export raw coded values or labels for multiple choice fields  rawOrLabelHeaders  - Same as above, for headers  exportCheckboxLabel  - Checkbox behavior: export checkboxes as \"checked/unchecked\" or as \"field-name/'blank'\"  file_loc  - Location to export to   Returns:  Formatted dict of report.  source", 
            "title": "Reports"
        }, 
        {
            "location": "/export/#notes_1", 
            "text": "Reports can also be exported using the generated ID given on the REDCap dashboard.", 
            "title": "Notes:"
        }, 
        {
            "location": "/export/#attn", 
            "text": "This is  NOT  the name of the report.  report = export_report(config,  2 )  A Report can contain a subset of records along with a subset of their fields. Report creation is handled through the REDCap project database.", 
            "title": "ATTN:"
        }, 
        {
            "location": "/export/#version", 
            "text": "The version of REDCap you are working with can be shown through  export_version()  export_version(config)  8.1.0", 
            "title": "Version"
        }, 
        {
            "location": "/export/#users", 
            "text": "#  REDCap.export_users     Method .  export_users(config::REDCap.Config; format::String= json , returnFormat::String= json , file_loc::String= )  Parameters:   config  - Struct containing url and api-key  format  - \"json\", \"xml\", \"csv\", or \"odm\". decides format of returned data  returnFormat  - Error message format  file_loc  - Location to export to   Returns:  Array of formatted dicts of users for project.  source", 
            "title": "Users"
        }, 
        {
            "location": "/export/#notes_2", 
            "text": "A full list of users can be exported and viewed/modified using the  export_users()  function. User Rights can be modified (by a user with appropriate rights) using this method. - See Section on Imports  #Returns an array of dictionaries\nusers = export_users(config)", 
            "title": "Notes:"
        }, 
        {
            "location": "/export/#surveys", 
            "text": "REDCap allows surveys to be tied both to a given event and to an individual record. Accessing features of these surveys is easy through the provided API.  A survey link can be generated for a particular record and instrument/event through the  export_survey_link()  function. The instrument name may be different than it is displayed on the REDCap dashboard. Surveys must be enabled for the given instrument.  #Creates a URL to survey for a given record\nlink = export_survey_link(config,  23 ,  demographics ,  event )  This returns a string of the link.  Return codes and Queue links can also be created by passing mostly the same values. Survey queue must be enabled for queue links to work.  #Survey return codes\ncode = export_survey_return_code(config,  1 ,  demographics ,  event )\n\n#Survey queue link\nqlink =  export_survey_queue_link(config,  1 )\n\n#Survey participant list\nlist = export_survey_participant_list(config,  demographics ,  event )", 
            "title": "Surveys"
        }, 
        {
            "location": "/export/#arms", 
            "text": "#  REDCap.export_arms     Method .  export_arms(config::REDCap.Config; arms::Array=[], format::String= json , returnFormat::String= json , file_loc::String= )  Returns a dict of all arms used in the project.  NOTE: This only works for longitudinal projects.  Parameters:   config  - Struct containing url and api-key  arms  - Array of arm names to export  format  - \"json\", \"xml\", \"csv\", or \"odm\". decides format of returned data  returnFormat  - Error message format  file_loc  - Location to export to   Returns:  Formatted dict of Arms for project.  source", 
            "title": "Arms"
        }, 
        {
            "location": "/export/#notes_3", 
            "text": "The metadata of a projects arms can be exported with  export_arms(config) , which by default returns a dictionary containing both the name and number of an arm. Only select arms may be exported by passing an array of arm numbers.  arms = export_arms(config)  This can only be used in a longitudinal project. Exporting arms in a non-longitudinal project will result in an error.", 
            "title": "Notes:"
        }, 
        {
            "location": "/export/#events", 
            "text": "#  REDCap.export_events     Method .  export_events(config::REDCap.Config; arms::Array=[], format::String= json , returnFormat::String= json , file_loc::String= )  NOTE: This only works for longitudinal projects.  Parameters:   config  - Struct containing url and api-key  arms  - Array of arm names to export  format  - \"json\", \"xml\", \"csv\", or \"odm\". decides format of returned data  returnFormat  - Error message format  file_loc  - Location to export to   Returns:  Formatted dict of events for project.  source", 
            "title": "Events"
        }, 
        {
            "location": "/export/#notes_4", 
            "text": "An array of events is returned, along with the events information.  events = export_events(config)", 
            "title": "Notes:"
        }, 
        {
            "location": "/export/#instruments", 
            "text": "#  REDCap.export_instruments     Method .  export_instruments(config::REDCap.Config; format::String= json , file_loc::String= )  Parameters:   config  - Struct containing url and api-key  format  - \"json\", \"xml\", \"csv\", or \"odm\". decides format of returned data  file_loc  - Location to export to   Returns:  Formatted dict for data collection instruments of project.  source", 
            "title": "Instruments"
        }, 
        {
            "location": "/export/#notes_5", 
            "text": "Instrument information may also be exported using  export_instruments(config) . By default this returns a dictionary of the instrument label and the instruments variable name (which is often different from the label and is needed to access instruments via the API).  instruments = export_instruments(config)", 
            "title": "Notes:"
        }, 
        {
            "location": "/export/#instrument-event-mappings", 
            "text": "#  REDCap.export_instrument_event_mappings     Function .  export_instrument_event_mappings(config::REDCap.Config, arms::Array=[]; format::String= json , returnFormat::String= json , file_loc::String= )  NOTE: This only works for longitudinal projects.  Parameters:   config  - Struct containing url and api-key  arms  - Array of arm names to export  format  - \"json\", \"xml\", \"csv\", or \"odm\". decides format of returned data  returnFormat  - Error message format  file_loc  - Location to export to   Returns:  Formatted dict of instrument-event mappings for project.  source", 
            "title": "Instrument Event Mappings"
        }, 
        {
            "location": "/export/#notes_6", 
            "text": "The mappings between events and instruments may be exported using  export_instrument_event_mappings()  export_instrument_event_mappings(config, [ 1 ])", 
            "title": "Notes:"
        }, 
        {
            "location": "/import/", 
            "text": "Import\n\n\nImporting into a REDCap database is straightforward. The data to be imported must be presented in either \njson\n (Array of Dicts), \nCSV\n, \nDataFrame\n, or \nxml\n format. These files can be loaded from a filepath as well. The correct format must be passed along with the object. REDCap defaults to \njson\n if no format is given.\n\n\nNote\n Some import functions (Metadata) are only available for projects marked in development, while others have their \noverride\n parameters disabled (arm, event).\n\n\n\n\nRecords\n\n\n#\n\n\nREDCap.import_records\n \n \nMethod\n.\n\n\nimport_records(config::REDCap.Config, data::Any; format::String=\njson\n, dtype::String=\nflat\n, overwriteBehavior::String=\nnormal\n, forceAutoNumber::Bool=false, dateFormat::String=\nYMD\n, returnContent::String=\ncount\n, returnFormat::String=\njson\n)\n\n\n\n\nImport a set of records for a project.\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing url and api-key\n\n\nrecordData\n - Array of record data to be imported - pass as a file location to import from disk\n\n\nformat\n - \"json\", \"xml\", \"csv\", or \"odm\". declares format of imported data\n\n\ndtype\n - \"flat\" (one record per row) or \"eav\" (one data point per row)\n\n\noverwriteBehavior\n - \"normal\" - will not overwrite, \"overwrite\" - will\n\n\nforceAutoNumber\n - Force auto-numbering and overwrite given id number\n\n\ndateFormat\n - \"YMD\", \"MDY\", or \"DMY\"\n\n\nreturnContent\n - \"count\" (number of successfully uploaded records),\n\n\n\n\n                    \nids\n (list of record numbers imported), \n                    \nauto-ids\n (pair of assigned id and given id)\n\n\n\n\n\n\nreturnFormat\n - Error message format\n\n\n\n\nReturns:\n\n\nSpecified by returnContent\n\n\nsource\n\n\n\n\nNotes:\n\n\nRecord:\n\n\nDict{String,Any} with 16 entries:\n  \nsex\n                   =\n \n0\n\n  \nage\n                   =\n \n56\n\n  \naddress\n               =\n \n168 Anderson Blvd. Quincy MA 01227\n\n  \nheight\n                =\n \n80\n\n  \ndob\n                   =\n \n1962-04-08\n\n  \nrecord_id\n             =\n \n1\n\n  \nbmi\n                   =\n \n125\n\n  \ncomments\n              =\n \nRandomly Generated - Demographics\n\n  \nemail\n                 =\n \nALin@aol.com\n\n  \nfirst_name\n            =\n \nAlexia\n\n  \ndemographics_complete\n =\n \n0\n\n  \ntelephone\n             =\n \n(617) 882-6049\n\n  \nweight\n                =\n \n80\n\n  \nlast_name\n             =\n \nLin\n\n  \nethnicity\n             =\n \n1\n\n  \nrace\n                  =\n \n1\n\n\n\n\n\nrecord_data=[Dict(\nrecord_id\n=\n1\n,\nfirst_name\n=\nJohn\n)]\n\nimport_records(config, record_data)\n\n#or from a file\nimport_records(config, \n/src/records.csv\n, format=\ncsv\n)\n\n\n\n\nWhich returns the number of records imported.\n\n\nDict{String,Any} with 1 entry:\n  \ncount\n =\n 1\n\n\n\n\nBy default, \njson\n is passed as the target format, but \ncsv\n/\ndf\n, \nxml\n, and \nodm\n formats are supported for import as well as export.\n\n\nFor projects with auto-numbering enabled. The next available record ID number is generated by the \ngenerate_next_record_id()\n function:\n\n\nnext_id = generate_next_record_id(config)\n\n\n\n\nWhich returns the number as an integer.\n\n\n\n\nProject Info\n\n\n#\n\n\nREDCap.import_project_information\n \n \nMethod\n.\n\n\nimport_project_information(config::REDCap.Config, data; format::String=\njson\n)\n\n\n\n\nUpdate basic attributes of given REDCap project. NOTE: Only for projects in development\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing url and api-key\n\n\ndata\n - Data to be imported - pass as a file location to import from disk\n\n\nformat\n - \"json\", \"xml\", \"csv\", or \"odm\". declares format of imported data\n\n\n\n\nReturns:\n\n\nNumber of successfully imported values\n\n\nsource\n\n\n\n\nNotes:\n\n\nThe project information and settings can be changed using this function by importing a dict with some/all of the desired settings.\n\n\nDict{String,Any} with 23 entries:\n  \nsecondary_unique_field\n              =\n \n\n  \nsurveys_enabled\n                     =\n \n0\n\n  \npurpose_other\n                       =\n \n\n  \nhas_repeating_instruments_or_events\n =\n 0\n  \nproduction_time\n                     =\n \n\n  \nproject_grant_number\n                =\n \n\n  \nddp_enabled\n                         =\n \n0\n\n  \nproject_id\n                          =\n \n21\n\n  \npurpose\n                             =\n \n0\n\n  \nscheduling_enabled\n                  =\n \n0\n\n  \nrandomization_enabled\n               =\n \n0\n\n  \nproject_language\n                    =\n \nEnglish\n\n  \nis_longitudinal\n                     =\n 0\n  \nproject_title\n                       =\n \nRC Test\n\n  \nproject_pi_firstname\n                =\n \n\n  \ndisplay_today_now_button\n            =\n \n1\n\n  \nrecord_autonumbering_enabled\n        =\n \n1\n\n  \ncreation_time\n                       =\n \n2018-07-16 19:17:34\n\n  \nproject_notes\n                       =\n \ntesting\n\n  \nin_production\n                       =\n \n0\n\n  \nproject_irb_number\n                  =\n \n\n  \ncustom_record_label\n                 =\n \n\n  \nproject_pi_lastname\n                 =\n \n\n\n\n\n\n\nA project can be marked as \"In Production\" this way, by changing the \nin_production\n value to 1.\n\n\n#Modifying existing information\ninfo = export_project_information(config)\ninfo[\nin_production\n]=\n1\n\nimport_project_information(config, info)\n\n\n\n\nSimilarily, a projects Grant ID can be entered and tied to the project.\n\n\n\n\nMetadata\n\n\nimport_metadata(config::REDCap.Config, data; format::String=\njson\n, returnFormat::String=\njson\n)\n\n\n\n\n\n\nNotes:\n\n\nA projects metadata can be modified before it leaves development status using the \nimport_metadata()\n function\n\n\nAn example of the \"Contact Information\" field:\n\n\nDict{String,Any} with 18 entries:\n  \nrequired_field\n                             =\n \n\n  \nsection_header\n                             =\n \nContact Information\n\n  \nmatrix_ranking\n                             =\n \n\n  \nselect_choices_or_calculations\n             =\n \n\n  \nfield_type\n                                 =\n \ntext\n\n  \nfield_note\n                                 =\n \n\n  \nform_name\n                                  =\n \ndemographics\n\n  \nmatrix_group_name\n                          =\n \n\n  \nfield_label\n                                =\n \nFirst Name\n\n  \ncustom_alignment\n                           =\n \n\n  \nquestion_number\n                            =\n \n\n  \ntext_validation_max\n                        =\n \n\n  \ntext_validation_type_or_show_slider_number\n =\n \n\n  \nbranching_logic\n                            =\n \n\n  \nfield_annotation\n                           =\n \n\n  \nidentifier\n                                 =\n \ny\n\n  \ntext_validation_min\n                        =\n \n\n  \nfield_name\n                                 =\n \nfirst_name\n\n\n\n\n\n\n#Example once this works\n\n\n\n\n\n\nUsers\n\n\nimport_users(config::REDCap.Config, data; format::String=\njson\n, returnFormat::String=\njson\n)\n\n\n\n\n\n\nNotes:\n\n\nUsers may be imported in the same way as above. User permissions are set/modified in this way.\n\n\njulia\n new_user\n\nDict{String,Any} with 32 entries:\n  \ndesign\n                     =\n \n0\n\n  \napi_export\n                 =\n \n0\n\n  \nuser_rights\n                =\n \n0\n\n  \ndata_access_groups\n         =\n \n0\n\n  \ndata_comparison_tool\n       =\n \n0\n\n  \nusername\n                   =\n \njohn_smith@email.com\n\n  \ndata_access_group_id\n       =\n \n\n  \ndata_export\n                =\n \n0\n\n  \nrecord_create\n              =\n \n0\n\n  \nreports\n                    =\n \n0\n\n  \ndata_import_tool\n           =\n \n0\n\n  \nfile_repository\n            =\n \n0\n\n  \nmobile_app_download_data\n   =\n \n0\n\n  \nmobile_app\n                 =\n \n0\n\n  \nemail\n                      =\n \n\n  \ndata_quality_create\n        =\n \n0\n\n  \nrecord_delete\n              =\n \n0\n\n  \ncalendar\n                   =\n \n0\n\n  \nlock_records_all_forms\n     =\n \n0\n\n  \nfirstname\n                  =\n \n\n  \nexpiration\n                 =\n \n\n  \ndata_access_group\n          =\n \n\n  \nforms\n                      =\n Dict{String,Any}(Pair{String,Any}(\ndemographics\n, \n0\n))\n  \napi_import\n                 =\n \n0\n\n  \nstats_and_charts\n           =\n \n0\n\n  \nrecord_rename\n              =\n \n0\n\n  \nlock_records_customization\n =\n \n0\n\n  \nlogging\n                    =\n \n0\n\n  \nlock_records\n               =\n \n0\n\n  \ndata_quality_execute\n       =\n \n0\n\n  \nmanage_survey_participants\n =\n \n0\n\n  \nlastname\n                   =\n \n\n\n\n\n\n#Add above user to the list of users\npush!(user_list, new_user)\n\n#Import new list into REDCap\nimport_users(config, user_list)\n\n\n\n\nUser Permissions:\n\n\nData Export: 0=No Access, 2=De-Identified, 1=Full Data Set\nForm Rights: 0=No Access, 2=Read Only, 1=View records/responses and edit records (survey responses are read-only), 3=Edit survey responses\nOther attribute values: 0=No Access, 1=Access.\n\n\n\n\n\n\nFiles\n\n\nimport_file(config::REDCap.Config, record::String, field::String, event::String, file::String; repeat_instance::Int=1, returnFormat::String=\njson\n)\n\n\n\n\n\n\nNotes:\n\n\nA specified file upload field is required to import a file. Any attempts to upload a file in a non-file field will result in error.\n\n\nimport_file(config, \n2\n, \nfile_upload\n, \n, \n/src/example.csv\n)\n\n\n\n\n\n\nArms\n\n\nimport_arms(config::REDCap.Config, data; override::Int=0, format::String=\njson\n, returnFormat::String=\njson\n)\n\n\n\n\n\n\nNotes:\n\n\nArms may be imported into REDCap by passing the name and arm number.\n\n\nDict{String,Any} with 2 entries:\n  \nname\n    =\n \nArm 1\n\n  \narm_num\n =\n 1\n\n\n\n\nimport_arms(config, newarm)\n\n\n\n\n\n\nATTN:\n\n\nUsing the override command on a project may lead to loss of arms, which will remove access to any associated records.\n\n\n\n\nEvents\n\n\n#\n\n\nREDCap.import_events\n \n \nMethod\n.\n\n\nimport_events(config::REDCap.Config, data; override::Int=0, format::String=\njson\n, returnFormat::String=\njson\n)\n\n\n\n\nUpdate/import Events into a project.\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing url and api-key\n\n\ndata\n - Data to be imported - pass as a file location to import from disk\n\n\noverride\n - 0 (false) 1 (true) - overwrites existing events\n\n\nformat\n - \"json\", \"xml\", \"csv\", or \"odm\". declares format of imported data\n\n\nreturnFormat\n - Error message format\n\n\n\n\nReturns:\n\n\nNumber of successfully imported events\n\n\nsource\n\n\n\n\nNotes:\n\n\nEvents can be passed into REDCap by passing their name and arm number, as well as any additional configurations.\n\n\nDict{String,Any} with 7 entries:\n  \nunique_event_name\n  =\n \nevent_1_arm_1\n\n  \ncustom_event_label\n =\n nothing\n  \noffset_max\n         =\n \n0\n\n  \narm_num\n            =\n \n1\n\n  \nevent_name\n         =\n \nEvent 1\n\n  \nday_offset\n         =\n \n1\n\n  \noffset_min\n         =\n \n0\n\n\n\n\n\nimport_events(config, event)\n\n\n\n\nImporting events with the same name will not overwrite by default, and will instead append a character. This can be changed by passing \noverride=1\n to overwrite existing events.\n\n\n\n\nInstrument Event Mappings\n\n\nimport_instrument_event_mappings(config::REDCap.Config, data; format::String=\njson\n, returnFormat::String=\njson\n)\n\n\n\n\n\n\nNotes:\n\n\nThe Instrument Event mapping allows REDCap to link different forms to different events easily.\n\n\nDict{String,Any} with 3 entries:\n  \narm_num\n           =\n 1\n  \nform\n              =\n \ndemographics\n\n  \nunique_event_name\n =\n \nevent_1_arm_1\n\n\n\n\n\nNew mappings can be created by specifying the arm, form, and event name to link together.\n\n\nimport_instrument_event_mappings(config, newmap)", 
            "title": "Import"
        }, 
        {
            "location": "/import/#import", 
            "text": "Importing into a REDCap database is straightforward. The data to be imported must be presented in either  json  (Array of Dicts),  CSV ,  DataFrame , or  xml  format. These files can be loaded from a filepath as well. The correct format must be passed along with the object. REDCap defaults to  json  if no format is given.  Note  Some import functions (Metadata) are only available for projects marked in development, while others have their  override  parameters disabled (arm, event).", 
            "title": "Import"
        }, 
        {
            "location": "/import/#records", 
            "text": "#  REDCap.import_records     Method .  import_records(config::REDCap.Config, data::Any; format::String= json , dtype::String= flat , overwriteBehavior::String= normal , forceAutoNumber::Bool=false, dateFormat::String= YMD , returnContent::String= count , returnFormat::String= json )  Import a set of records for a project.  Parameters:   config  - Struct containing url and api-key  recordData  - Array of record data to be imported - pass as a file location to import from disk  format  - \"json\", \"xml\", \"csv\", or \"odm\". declares format of imported data  dtype  - \"flat\" (one record per row) or \"eav\" (one data point per row)  overwriteBehavior  - \"normal\" - will not overwrite, \"overwrite\" - will  forceAutoNumber  - Force auto-numbering and overwrite given id number  dateFormat  - \"YMD\", \"MDY\", or \"DMY\"  returnContent  - \"count\" (number of successfully uploaded records),                        ids  (list of record numbers imported), \n                     auto-ids  (pair of assigned id and given id)   returnFormat  - Error message format   Returns:  Specified by returnContent  source", 
            "title": "Records"
        }, 
        {
            "location": "/import/#notes", 
            "text": "Record:  Dict{String,Any} with 16 entries:\n   sex                    =   0 \n   age                    =   56 \n   address                =   168 Anderson Blvd. Quincy MA 01227 \n   height                 =   80 \n   dob                    =   1962-04-08 \n   record_id              =   1 \n   bmi                    =   125 \n   comments               =   Randomly Generated - Demographics \n   email                  =   ALin@aol.com \n   first_name             =   Alexia \n   demographics_complete  =   0 \n   telephone              =   (617) 882-6049 \n   weight                 =   80 \n   last_name              =   Lin \n   ethnicity              =   1 \n   race                   =   1   record_data=[Dict( record_id = 1 , first_name = John )]\n\nimport_records(config, record_data)\n\n#or from a file\nimport_records(config,  /src/records.csv , format= csv )  Which returns the number of records imported.  Dict{String,Any} with 1 entry:\n   count  =  1  By default,  json  is passed as the target format, but  csv / df ,  xml , and  odm  formats are supported for import as well as export.  For projects with auto-numbering enabled. The next available record ID number is generated by the  generate_next_record_id()  function:  next_id = generate_next_record_id(config)  Which returns the number as an integer.", 
            "title": "Notes:"
        }, 
        {
            "location": "/import/#project-info", 
            "text": "#  REDCap.import_project_information     Method .  import_project_information(config::REDCap.Config, data; format::String= json )  Update basic attributes of given REDCap project. NOTE: Only for projects in development  Parameters:   config  - Struct containing url and api-key  data  - Data to be imported - pass as a file location to import from disk  format  - \"json\", \"xml\", \"csv\", or \"odm\". declares format of imported data   Returns:  Number of successfully imported values  source", 
            "title": "Project Info"
        }, 
        {
            "location": "/import/#notes_1", 
            "text": "The project information and settings can be changed using this function by importing a dict with some/all of the desired settings.  Dict{String,Any} with 23 entries:\n   secondary_unique_field               =   \n   surveys_enabled                      =   0 \n   purpose_other                        =   \n   has_repeating_instruments_or_events  =  0\n   production_time                      =   \n   project_grant_number                 =   \n   ddp_enabled                          =   0 \n   project_id                           =   21 \n   purpose                              =   0 \n   scheduling_enabled                   =   0 \n   randomization_enabled                =   0 \n   project_language                     =   English \n   is_longitudinal                      =  0\n   project_title                        =   RC Test \n   project_pi_firstname                 =   \n   display_today_now_button             =   1 \n   record_autonumbering_enabled         =   1 \n   creation_time                        =   2018-07-16 19:17:34 \n   project_notes                        =   testing \n   in_production                        =   0 \n   project_irb_number                   =   \n   custom_record_label                  =   \n   project_pi_lastname                  =     A project can be marked as \"In Production\" this way, by changing the  in_production  value to 1.  #Modifying existing information\ninfo = export_project_information(config)\ninfo[ in_production ]= 1 \nimport_project_information(config, info)  Similarily, a projects Grant ID can be entered and tied to the project.", 
            "title": "Notes:"
        }, 
        {
            "location": "/import/#metadata", 
            "text": "import_metadata(config::REDCap.Config, data; format::String= json , returnFormat::String= json )", 
            "title": "Metadata"
        }, 
        {
            "location": "/import/#notes_2", 
            "text": "A projects metadata can be modified before it leaves development status using the  import_metadata()  function  An example of the \"Contact Information\" field:  Dict{String,Any} with 18 entries:\n   required_field                              =   \n   section_header                              =   Contact Information \n   matrix_ranking                              =   \n   select_choices_or_calculations              =   \n   field_type                                  =   text \n   field_note                                  =   \n   form_name                                   =   demographics \n   matrix_group_name                           =   \n   field_label                                 =   First Name \n   custom_alignment                            =   \n   question_number                             =   \n   text_validation_max                         =   \n   text_validation_type_or_show_slider_number  =   \n   branching_logic                             =   \n   field_annotation                            =   \n   identifier                                  =   y \n   text_validation_min                         =   \n   field_name                                  =   first_name   #Example once this works", 
            "title": "Notes:"
        }, 
        {
            "location": "/import/#users", 
            "text": "import_users(config::REDCap.Config, data; format::String= json , returnFormat::String= json )", 
            "title": "Users"
        }, 
        {
            "location": "/import/#notes_3", 
            "text": "Users may be imported in the same way as above. User permissions are set/modified in this way.  julia  new_user\n\nDict{String,Any} with 32 entries:\n   design                      =   0 \n   api_export                  =   0 \n   user_rights                 =   0 \n   data_access_groups          =   0 \n   data_comparison_tool        =   0 \n   username                    =   john_smith@email.com \n   data_access_group_id        =   \n   data_export                 =   0 \n   record_create               =   0 \n   reports                     =   0 \n   data_import_tool            =   0 \n   file_repository             =   0 \n   mobile_app_download_data    =   0 \n   mobile_app                  =   0 \n   email                       =   \n   data_quality_create         =   0 \n   record_delete               =   0 \n   calendar                    =   0 \n   lock_records_all_forms      =   0 \n   firstname                   =   \n   expiration                  =   \n   data_access_group           =   \n   forms                       =  Dict{String,Any}(Pair{String,Any}( demographics ,  0 ))\n   api_import                  =   0 \n   stats_and_charts            =   0 \n   record_rename               =   0 \n   lock_records_customization  =   0 \n   logging                     =   0 \n   lock_records                =   0 \n   data_quality_execute        =   0 \n   manage_survey_participants  =   0 \n   lastname                    =     #Add above user to the list of users\npush!(user_list, new_user)\n\n#Import new list into REDCap\nimport_users(config, user_list)  User Permissions:  Data Export: 0=No Access, 2=De-Identified, 1=Full Data Set\nForm Rights: 0=No Access, 2=Read Only, 1=View records/responses and edit records (survey responses are read-only), 3=Edit survey responses\nOther attribute values: 0=No Access, 1=Access.", 
            "title": "Notes:"
        }, 
        {
            "location": "/import/#files", 
            "text": "import_file(config::REDCap.Config, record::String, field::String, event::String, file::String; repeat_instance::Int=1, returnFormat::String= json )", 
            "title": "Files"
        }, 
        {
            "location": "/import/#notes_4", 
            "text": "A specified file upload field is required to import a file. Any attempts to upload a file in a non-file field will result in error.  import_file(config,  2 ,  file_upload ,  ,  /src/example.csv )", 
            "title": "Notes:"
        }, 
        {
            "location": "/import/#arms", 
            "text": "import_arms(config::REDCap.Config, data; override::Int=0, format::String= json , returnFormat::String= json )", 
            "title": "Arms"
        }, 
        {
            "location": "/import/#notes_5", 
            "text": "Arms may be imported into REDCap by passing the name and arm number.  Dict{String,Any} with 2 entries:\n   name     =   Arm 1 \n   arm_num  =  1  import_arms(config, newarm)", 
            "title": "Notes:"
        }, 
        {
            "location": "/import/#attn", 
            "text": "Using the override command on a project may lead to loss of arms, which will remove access to any associated records.", 
            "title": "ATTN:"
        }, 
        {
            "location": "/import/#events", 
            "text": "#  REDCap.import_events     Method .  import_events(config::REDCap.Config, data; override::Int=0, format::String= json , returnFormat::String= json )  Update/import Events into a project.  Parameters:   config  - Struct containing url and api-key  data  - Data to be imported - pass as a file location to import from disk  override  - 0 (false) 1 (true) - overwrites existing events  format  - \"json\", \"xml\", \"csv\", or \"odm\". declares format of imported data  returnFormat  - Error message format   Returns:  Number of successfully imported events  source", 
            "title": "Events"
        }, 
        {
            "location": "/import/#notes_6", 
            "text": "Events can be passed into REDCap by passing their name and arm number, as well as any additional configurations.  Dict{String,Any} with 7 entries:\n   unique_event_name   =   event_1_arm_1 \n   custom_event_label  =  nothing\n   offset_max          =   0 \n   arm_num             =   1 \n   event_name          =   Event 1 \n   day_offset          =   1 \n   offset_min          =   0   import_events(config, event)  Importing events with the same name will not overwrite by default, and will instead append a character. This can be changed by passing  override=1  to overwrite existing events.", 
            "title": "Notes:"
        }, 
        {
            "location": "/import/#instrument-event-mappings", 
            "text": "import_instrument_event_mappings(config::REDCap.Config, data; format::String= json , returnFormat::String= json )", 
            "title": "Instrument Event Mappings"
        }, 
        {
            "location": "/import/#notes_7", 
            "text": "The Instrument Event mapping allows REDCap to link different forms to different events easily.  Dict{String,Any} with 3 entries:\n   arm_num            =  1\n   form               =   demographics \n   unique_event_name  =   event_1_arm_1   New mappings can be created by specifying the arm, form, and event name to link together.  import_instrument_event_mappings(config, newmap)", 
            "title": "Notes:"
        }, 
        {
            "location": "/delete/", 
            "text": "Deletion\n\n\nRecords, Files, Arms, and Events may be deleted from a project via API call.\n\n\n\n\nRecords\n\n\n#\n\n\nREDCap.delete_records\n \n \nMethod\n.\n\n\ndelete_records(config::REDCap.Config, records::Array; arm::Integer=0)\n\n\n\n\nDelete one or more records from project.\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing the url and api-key\n\n\nrecords\n - Array of record names to delete\n\n\narm\n - Number of arm containing records\n\n\n\n\nReturns:\n\n\nNumber of records successfully deleted\n\n\nsource\n\n\n\n\nNotes:\n\n\nAn array of \nrecord_id\n names is passed, and if they exist, they will be deleted.\n\n\n#For non-longitudinal projects\ndelete_records(config, [\n1\n,\n2\n,\n25\n])\n\ndelete_records(config, [\n1\n,\n2\n,\n25\n], arm=\n1\n)\n\n\n\n\nThe number of records deleted will be returned. If a record is specified that does not exist, REDCap will throw an error (It will \nNOT\n delete the valid ids).\n\n\n\n\nFiles\n\n\n#\n\n\nREDCap.delete_file\n \n \nMethod\n.\n\n\ndelete_file(config::REDCap.Config, record::String, field::String, event::String; repeat_instance::Integer=1, returnFormat::String=\njson\n)\n\n\n\n\nDelete document attached to record.\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing url and api-key\n\n\nrecord\n - Name of record containing file\n\n\nfield\n - Name of field containing file\n\n\nevent\n - Name of event containing file\n\n\nrepeat_instance\n - Number of repeated instances (long project)\n\n\nreturnFormat\n - Error message format\n\n\n\n\nReturns:\n\n\nNothing/error\n\n\nsource\n\n\n\n\nNotes:\n\n\nThe location of the file must be specified by passing the record name, the field containing the file, and the event.\n\n\ndelete_file(config, \n2\n, \nfile_upload\n, \nevent\n)\n\n\n\n\n\n\nArms\n\n\n#\n\n\nREDCap.delete_arms\n \n \nMethod\n.\n\n\ndelete_arms(config::REDCap.Config, arms::Array)\n\n\n\n\nDelete Arms from project. Removing all arms reverts the project into a non-longitudinal project.\n\n\nNOTE: This only works for longitudinal projects.\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing url and api-key\n\n\narms\n - Array of arm names to delete\n\n\n\n\nReturns:\n\n\nNumber of succesfully deleted arms\n\n\nsource\n\n\ndelete_arms(config, [\n1\n])\n\n\n\n\n\n\nEvents\n\n\n#\n\n\nREDCap.delete_events\n \n \nMethod\n.\n\n\ndelete_events(config::REDCap.Config, events::Array)\n\n\n\n\nDelete Events from project. Removing all but one event reverts the project into a non-longitudinal project.\n\n\nNOTE: This only works for longitudinal projects.\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing url and api-key\n\n\nevents\n - Array of event names to delete\n\n\n\n\nReturns:\n\n\nNumber of successfully deleted events\n\n\nsource\n\n\ndelete_events(config, [\nevent_1_arm_1\n])", 
            "title": "Deletion"
        }, 
        {
            "location": "/delete/#deletion", 
            "text": "Records, Files, Arms, and Events may be deleted from a project via API call.", 
            "title": "Deletion"
        }, 
        {
            "location": "/delete/#records", 
            "text": "#  REDCap.delete_records     Method .  delete_records(config::REDCap.Config, records::Array; arm::Integer=0)  Delete one or more records from project.  Parameters:   config  - Struct containing the url and api-key  records  - Array of record names to delete  arm  - Number of arm containing records   Returns:  Number of records successfully deleted  source", 
            "title": "Records"
        }, 
        {
            "location": "/delete/#notes", 
            "text": "An array of  record_id  names is passed, and if they exist, they will be deleted.  #For non-longitudinal projects\ndelete_records(config, [ 1 , 2 , 25 ])\n\ndelete_records(config, [ 1 , 2 , 25 ], arm= 1 )  The number of records deleted will be returned. If a record is specified that does not exist, REDCap will throw an error (It will  NOT  delete the valid ids).", 
            "title": "Notes:"
        }, 
        {
            "location": "/delete/#files", 
            "text": "#  REDCap.delete_file     Method .  delete_file(config::REDCap.Config, record::String, field::String, event::String; repeat_instance::Integer=1, returnFormat::String= json )  Delete document attached to record.  Parameters:   config  - Struct containing url and api-key  record  - Name of record containing file  field  - Name of field containing file  event  - Name of event containing file  repeat_instance  - Number of repeated instances (long project)  returnFormat  - Error message format   Returns:  Nothing/error  source", 
            "title": "Files"
        }, 
        {
            "location": "/delete/#notes_1", 
            "text": "The location of the file must be specified by passing the record name, the field containing the file, and the event.  delete_file(config,  2 ,  file_upload ,  event )", 
            "title": "Notes:"
        }, 
        {
            "location": "/delete/#arms", 
            "text": "#  REDCap.delete_arms     Method .  delete_arms(config::REDCap.Config, arms::Array)  Delete Arms from project. Removing all arms reverts the project into a non-longitudinal project.  NOTE: This only works for longitudinal projects.  Parameters:   config  - Struct containing url and api-key  arms  - Array of arm names to delete   Returns:  Number of succesfully deleted arms  source  delete_arms(config, [ 1 ])", 
            "title": "Arms"
        }, 
        {
            "location": "/delete/#events", 
            "text": "#  REDCap.delete_events     Method .  delete_events(config::REDCap.Config, events::Array)  Delete Events from project. Removing all but one event reverts the project into a non-longitudinal project.  NOTE: This only works for longitudinal projects.  Parameters:   config  - Struct containing url and api-key  events  - Array of event names to delete   Returns:  Number of successfully deleted events  source  delete_events(config, [ event_1_arm_1 ])", 
            "title": "Events"
        }, 
        {
            "location": "/utils/", 
            "text": "Utilities\n\n\n\n\nConfig\n\n\nREDCap.Config(url::String, key::String; ssl::Bool = true)\n\n\n\n\n\n\nNotes:\n\n\nAll REDCap projects need to be tied to their url and API Key, which is done by creating a REDCap.Config object\n\n\nconfig = REDCap.Config(\nurl\n, \n32-digit_API_key\n)\n\n\n\n\nFor certain projects, SSL Verification may need to be disabled. The config object can be set-up without ssl verification as so:\n\n\nconfig = REDCap.Config(\nurl\n, \n32-digit_API_key\n, ssl=false)\n\n\n\n\nSSL verification should only be disabled in circumstances where a REDCap API cannot be SSL secured, but must still be accessed. The ssl setting will default to true.\n\n\n\n\nProject Creation\n\n\n#\n\n\nREDCap.create_project\n \n \nMethod\n.\n\n\ncreate_project(config::REDCap.Config, project_title::String, purpose::Integer; format::String=\njson\n, returnFormat::String=\njson\n, odm=\n, purpose_other::String=\n, project_notes::String=\n, is_longitudinal::Integer=0, surveys_enabled::Integer=0, record_autonumbering_enabled::Integer=1)\n\n\n\n\nCreates a project with the given parameters\n\n\nParameters:\n\n\n\n\nconfig\n - Struct containing url and super-api-key\n\n\nformat\n - \"json\", \"xml\", \"csv\", or \"odm\". declares format of imported data\n\n\ndata\n - Attributes of project to create- only project_title and purpose are required (* for default)\n\n\n\n\n* `project_title`: Title\n* `purpose`: Must be numerical (0 - test, 1 - other, 2 - research, 3 - Qual+, 4 - OpSupport)\n* `purpose_other`: If purpose == 1, string of purpose\n* `project_notes`: Notes\n* `is_longitudinal`: 0 - false*, 1 - true\n* `surveys_enabled`: 0 - false*, 1 - true\n* `record_autonumbering_enabled`: 0 - false, 1 - true*\n\n\n\n\n\n\nreturnFormat\n - Error message format\n\n\nodm\n - XML string containing metadata\n\n\n\n\nReturns:\n\n\nThe standard config for that project.\n\n\nsource\n\n\n\n\nNotes:\n\n\nProjects can be created by first constructing a superConfig object, and initializing a project with desired settings. The function returns the config object for the new project.\n\n\nsuperconfig = REDCap.Config(\nurl\n, \n64-digit_superAPI_key\n)\n\n#A default test project.\nconfig = create_project(superconfig, \nNew Project Name\n, 0) #0 indicates a test project\n\n\n\n\nAny new calls to this project can now be made using the returned config object.\n\n\n\n\nATTN:\n\n\nThere is currently no available way to delete a project through the API. Under most circumstances, only your REDCap system administrator can delete a project.\n\n\n\n\nRecord ID\n\n\nIt may be necessary for some projects to retrieve the next available record ID. This can be done using \ngenerate_next_record_id()\n.\n\n\ngenerate_next_record_id(config)\n\n\n\n\n\n\nNotes:\n\n\nFrom the REDCap Documentation:\n\n\n\n\nIf using Data Access Groups (DAGs) in the project, this method accounts for the special formatting of the record name for users in DAGs (e.g., DAG-ID); in this case, it only assigns the next value for ID for all numbers inside a DAG. For example, if a DAG has a corresponding DAG number of 223 wherein records 223-1 and 223-2 already exist, then the next record will be 223-3 if the API user belongs to the DAG that has DAG number 223. (The DAG number is auto-assigned by REDCap for each DAG when the DAG is first created.) When generating a new record name in a DAG, the method considers all records in the entire project when determining the maximum record ID, including those that might have been originally created in that DAG but then later reassigned to another DAG.", 
            "title": "Utilities"
        }, 
        {
            "location": "/utils/#utilities", 
            "text": "", 
            "title": "Utilities"
        }, 
        {
            "location": "/utils/#config", 
            "text": "REDCap.Config(url::String, key::String; ssl::Bool = true)", 
            "title": "Config"
        }, 
        {
            "location": "/utils/#notes", 
            "text": "All REDCap projects need to be tied to their url and API Key, which is done by creating a REDCap.Config object  config = REDCap.Config( url ,  32-digit_API_key )  For certain projects, SSL Verification may need to be disabled. The config object can be set-up without ssl verification as so:  config = REDCap.Config( url ,  32-digit_API_key , ssl=false)  SSL verification should only be disabled in circumstances where a REDCap API cannot be SSL secured, but must still be accessed. The ssl setting will default to true.", 
            "title": "Notes:"
        }, 
        {
            "location": "/utils/#project-creation", 
            "text": "#  REDCap.create_project     Method .  create_project(config::REDCap.Config, project_title::String, purpose::Integer; format::String= json , returnFormat::String= json , odm= , purpose_other::String= , project_notes::String= , is_longitudinal::Integer=0, surveys_enabled::Integer=0, record_autonumbering_enabled::Integer=1)  Creates a project with the given parameters  Parameters:   config  - Struct containing url and super-api-key  format  - \"json\", \"xml\", \"csv\", or \"odm\". declares format of imported data  data  - Attributes of project to create- only project_title and purpose are required (* for default)   * `project_title`: Title\n* `purpose`: Must be numerical (0 - test, 1 - other, 2 - research, 3 - Qual+, 4 - OpSupport)\n* `purpose_other`: If purpose == 1, string of purpose\n* `project_notes`: Notes\n* `is_longitudinal`: 0 - false*, 1 - true\n* `surveys_enabled`: 0 - false*, 1 - true\n* `record_autonumbering_enabled`: 0 - false, 1 - true*   returnFormat  - Error message format  odm  - XML string containing metadata   Returns:  The standard config for that project.  source", 
            "title": "Project Creation"
        }, 
        {
            "location": "/utils/#notes_1", 
            "text": "Projects can be created by first constructing a superConfig object, and initializing a project with desired settings. The function returns the config object for the new project.  superconfig = REDCap.Config( url ,  64-digit_superAPI_key )\n\n#A default test project.\nconfig = create_project(superconfig,  New Project Name , 0) #0 indicates a test project  Any new calls to this project can now be made using the returned config object.", 
            "title": "Notes:"
        }, 
        {
            "location": "/utils/#attn", 
            "text": "There is currently no available way to delete a project through the API. Under most circumstances, only your REDCap system administrator can delete a project.", 
            "title": "ATTN:"
        }, 
        {
            "location": "/utils/#record-id", 
            "text": "It may be necessary for some projects to retrieve the next available record ID. This can be done using  generate_next_record_id() .  generate_next_record_id(config)", 
            "title": "Record ID"
        }, 
        {
            "location": "/utils/#notes_2", 
            "text": "From the REDCap Documentation:   If using Data Access Groups (DAGs) in the project, this method accounts for the special formatting of the record name for users in DAGs (e.g., DAG-ID); in this case, it only assigns the next value for ID for all numbers inside a DAG. For example, if a DAG has a corresponding DAG number of 223 wherein records 223-1 and 223-2 already exist, then the next record will be 223-3 if the API user belongs to the DAG that has DAG number 223. (The DAG number is auto-assigned by REDCap for each DAG when the DAG is first created.) When generating a new record name in a DAG, the method considers all records in the entire project when determining the maximum record ID, including those that might have been originally created in that DAG but then later reassigned to another DAG.", 
            "title": "Notes:"
        }, 
        {
            "location": "/examples/", 
            "text": "Examples\n\n\n\n\nBasic Usage\n\n\nA basic project can be created and accessed like so:\n\n\nusing REDCap\n\n#create config object for project creation\nsuper_config = REDCap.Config(\nURL\n, \nS-API\n)\n\nconfig = create_project(super_config, \nTest Project\n, 1; purpose_other=\nTesting REDCap.jl Functionality\n, project_notes=\nThis is not an actual REDCap Database.\n)\n\n\n#Importing- NOTE: Records may be incomplete. Only provided fields will be updated\nrecord=[Dict(\nsex\n=\n0\n,\n      \nage\n=\n56\n,\n      \naddress\n=\n168 Anderson Blvd. Quincy MA 01227\n,\n      \nheight\n=\n80\n,\n      \ndob\n=\n1962-04-08\n,\n      \nrecord_id\n=\n1\n,\n      \nbmi\n=\n125\n,\n      \ncomments\n=\nRandomly Generated - Demographics\n,\n      \nemail\n=\nALin@aol.com\n,\n      \nfirst_name\n=\nAlexia\n,\n      \ndemographics_complete\n=\n0\n,\n      \ntelephone\n=\n(617) 882-6049\n,\n      \nweight\n=\n80\n,\n      \nlast_name\n=\nLin\n,\n      \nethnicity\n=\n1\n,\n      \nrace\n=\n1\n)]\n\nimport_records(config, record)\n\n#create new user with basic import/export permissions\nuser=[Dict(\nusername\n =\n \njohn_smith@email.com\n,\n         \nemail\n =\n \njohn_smith@email.com\n,\n         \nlastname\n =\n \nSmith\n,\n         \napi_export\n=\n1\n,\n         \napi_import\n=\n1\n)]\n\nimport_users(config, user)\n\n#Exporting\nrecords = export_records(config)\n\n#Edit project info to remove development status\nfinal_proj_info=Dict(\nproject_title\n =\n \nRC Production\n,\n                     \nin_production\n =\n \n1\n)\nimport_project_information(config, final_proj_info)\n\n#pdf summary of the project\nexport_pdf(config, \n/\npath\n/export.pdf\n, allRecords=true)\n\n\n\n\n\n\nFile Handling\n\n\nRecords and other project information can be loaded directly from a \n.csv\n, \n.xml\n, or \n.odm\n. Likewise, exported information can be saved directly to a specified file.\n\n\n#Exporting - file_loc must be provided as the save path\nexport_records(config, file_loc=\npath\n/records.xml\n, format=\nxml\n)\n\nexport_users(config, file_loc=\npath\n/users.csv\n, format=\ncsv\n)\n\n#Importing - data passed as a file-path is loaded directly into the API\nimport_records(config, \npath\n/records.xml\n, format=\nxml\n) #NOTE: The format must match the file format you are uploading\n\nimport_users(config, \npath\n/users.csv\n, format=\ncsv\n)", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#basic-usage", 
            "text": "A basic project can be created and accessed like so:  using REDCap\n\n#create config object for project creation\nsuper_config = REDCap.Config( URL ,  S-API )\n\nconfig = create_project(super_config,  Test Project , 1; purpose_other= Testing REDCap.jl Functionality , project_notes= This is not an actual REDCap Database. )\n\n\n#Importing- NOTE: Records may be incomplete. Only provided fields will be updated\nrecord=[Dict( sex = 0 ,\n       age = 56 ,\n       address = 168 Anderson Blvd. Quincy MA 01227 ,\n       height = 80 ,\n       dob = 1962-04-08 ,\n       record_id = 1 ,\n       bmi = 125 ,\n       comments = Randomly Generated - Demographics ,\n       email = ALin@aol.com ,\n       first_name = Alexia ,\n       demographics_complete = 0 ,\n       telephone = (617) 882-6049 ,\n       weight = 80 ,\n       last_name = Lin ,\n       ethnicity = 1 ,\n       race = 1 )]\n\nimport_records(config, record)\n\n#create new user with basic import/export permissions\nuser=[Dict( username  =   john_smith@email.com ,\n          email  =   john_smith@email.com ,\n          lastname  =   Smith ,\n          api_export = 1 ,\n          api_import = 1 )]\n\nimport_users(config, user)\n\n#Exporting\nrecords = export_records(config)\n\n#Edit project info to remove development status\nfinal_proj_info=Dict( project_title  =   RC Production ,\n                      in_production  =   1 )\nimport_project_information(config, final_proj_info)\n\n#pdf summary of the project\nexport_pdf(config,  / path /export.pdf , allRecords=true)", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/examples/#file-handling", 
            "text": "Records and other project information can be loaded directly from a  .csv ,  .xml , or  .odm . Likewise, exported information can be saved directly to a specified file.  #Exporting - file_loc must be provided as the save path\nexport_records(config, file_loc= path /records.xml , format= xml )\n\nexport_users(config, file_loc= path /users.csv , format= csv )\n\n#Importing - data passed as a file-path is loaded directly into the API\nimport_records(config,  path /records.xml , format= xml ) #NOTE: The format must match the file format you are uploading\n\nimport_users(config,  path /users.csv , format= csv )", 
            "title": "File Handling"
        }
    ]
}